# Docker Compose配置 - HTTPS版本
# 包含Nginx反向代理和SSL支持

version: '3.8'

services:
  # AI绘本应用
  ai-storybook:
    build: .
    container_name: ai-storybook-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - COZE_API_TOKEN=${COZE_API_TOKEN}
      - COZE_BASE_URL=${COZE_BASE_URL:-https://api.coze.cn}
      - COZE_WORKFLOW_ID=${COZE_WORKFLOW_ID}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ai-storybook-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./hypersmart.work_nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - ai-storybook
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Let's Encrypt证书管理（可选）
  certbot:
    image: certbot/certbot
    container_name: ai-storybook-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot-webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d hypersmart.work -d www.hypersmart.work
    profiles:
      - certbot

volumes:
  nginx-logs:

networks:
  app-network:
    driver: bridge
